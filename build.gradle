plugins {
    id 'java'
    id 'maven-publish'
    id 'org.springframework.boot' version '3.2.5'
    id 'io.spring.dependency-management' version '1.1.5'
    id 'org.graalvm.buildtools.native' version '0.10.2'
}

group = 'at.schoolist'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
    maven { url 'https://artifactory-oss.prod.netflix.net/artifactory/maven-oss-candidates' }
}

ext {
    set('springCloudVersion', "2023.0.1")
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

    implementation 'org.mapstruct:mapstruct:1.5.5.Final'
    implementation 'io.micrometer:micrometer-tracing-bridge-otel'
    implementation 'net.ttddyy.observation:datasource-micrometer-spring-boot:1.0.3'
    implementation 'io.opentelemetry:opentelemetry-exporter-otlp'
    implementation 'io.github.digma-ai:digma-spring-boot-micrometer-tracing-autoconf:0.7.7'
    runtimeOnly 'org.postgresql:postgresql'
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.5.Final'
    annotationProcessor("org.projectlombok:lombok-mapstruct-binding:0.2.0")


    //Observability
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'io.micrometer:micrometer-registry-prometheus'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    runtimeOnly 'io.micrometer:micrometer-registry-prometheus'

    //Dev-Tools
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.5.0'
    implementation 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    testAndDevelopmentOnly 'org.springframework.boot:spring-boot-devtools'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'

    //Testing
    testImplementation 'org.springdoc:springdoc-openapi-starter-webmvc-api'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

tasks.named('test') {
    useJUnitPlatform()
}

tasks.named('bootBuildImage') {
    builder = 'paketobuildpacks/builder:base'

    if(System.getenv('NATIVE_IMAGE_ENABLED') == 'enabled'){
        println("bootBuildImage is building a native image")
        environment = ['BP_NATIVE_IMAGE': 'true']
    }else {
        environment = ['BP_LIVE_RELOAD_ENABLED': 'true']
    }

    imageName = "${project.name}"

    docker {
        publishRegistry {
            username = project.findProperty("registryUsername")
            password = project.findProperty("registryToken")
            url = project.findProperty("registryUrl")
        }
    }
}